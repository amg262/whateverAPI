### Variables
@baseUrl = https://localhost:8081
@token = // Will be set after login

### Authentication Flow

### Regular User Login
# @name login
POST {{baseUrl}}/api/v1/user/login
Content-Type: application/json

{
  "email": "user@user.com",
  "name": "Test User"
}

### Store token from login response
### Extract and store auth token from the login response
@authToken = {{userLogin.response.body.token}}

### OAuth Flows

### Get Google OAuth URL
GET {{baseUrl}}/api/v1/auth/google/login

### Get Microsoft OAuth URL
GET {{baseUrl}}/api/v1/auth/microsoft/login

### Get Facebook OAuth URL
GET {{baseUrl}}/api/v1/auth/facebook/login

### Role Management

### Get All Roles (requires auth)
GET {{baseUrl}}/api/v1/roles
Authorization: Bearer {{token}}

### Create New Role (admin only)
POST {{baseUrl}}/api/v1/roles
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "tester",
  "description": "Role for testing purposes"
}

### Store token and user ID from login response
@userId = {{userLogin.response.body.id}}

### Assign Role to User
PUT {{baseUrl}}/api/v1/roles/user/{{userId}}/assign/tester
Authorization: Bearer {{token}}
Content-Type: application/json

{
    "userId": "{{userId}}",
    "roleName": "tester"
}

### Get User's Role
GET {{baseUrl}}/api/v1/roles/user/{{userId}}
Authorization: Bearer {{token}}

### Tag Management

### Get All Tags
GET {{baseUrl}}/api/v1/tag
Authorization: Bearer {{token}}

### Create New Tag
# @name createTag
POST {{baseUrl}}/api/v1/tag
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "name": "test-tag"
}

### Store tag ID from response
@tagId = {{createTag.response.body.$.id}}

### Get Tag by ID
GET {{baseUrl}}/api/v1/tag/{{tagId}}
Authorization: Bearer {{authToken}}

### Update Tag
PUT {{baseUrl}}/api/v1/tag/{{tagId}}
Authorization: Bearer {{authToken}}
Content-Type: application/json

{
  "name": "updated-test-tag",
  "isActive": true
}

### Delete Tag
DELETE {{baseUrl}}/api/v1/tag/{{tagId}}
Authorization: Bearer {{authToken}}

### Joke Management

### Get All Jokes
GET {{baseUrl}}/api/v1/jokes
Authorization: Bearer {{token}}

### Create New Joke
# @name createJoke
POST {{baseUrl}}/api/v1/jokes
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "content": "Why did the developer quit his job? He didn't get arrays!",
  "type": "Programming",
  "tags": ["programming", "work"],
  "laughScore": 85,
  "isActive": true
}

### Store joke ID from response
@jokeId = {{createJoke.response.body.$.id}}

### Get Joke by ID
GET {{baseUrl}}/api/v1/jokes/{{jokeId}}
Authorization: Bearer {{token}}

### Update Joke
PUT {{baseUrl}}/api/v1/jokes/{{jokeId}}
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "content": "Updated: Why did the developer quit his job? He didn't get arrays!",
  "type": "Programming",
  "tags": ["programming", "work", "updated"],
  "laughScore": 90,
  "isActive": true
}

### Search Jokes
GET {{baseUrl}}/api/v1/jokes/search?q=developer
Authorization: Bearer {{token}}

### Advanced Joke Search and Filter
POST {{baseUrl}}/api/v1/jokes/find
Authorization: Bearer {{token}}
Content-Type: application/json

{
  "type": "Programming",
  "query": "developer",
  "active": true,
  "pageSize": 10,
  "pageNumber": 1,
  "sortBy": "laughScore",
  "sortDescending": true
}

### Get External Joke
GET {{baseUrl}}/api/v1/jokes/whatever
Authorization: Bearer {{token}}

### Get Basic Joke (Klump)
GET {{baseUrl}}/api/v1/jokes/klump
Authorization: Bearer {{token}}

### Cleanup/Logout

### Logout User
POST {{baseUrl}}/api/v1/user/logout
Authorization: Bearer {{token}}